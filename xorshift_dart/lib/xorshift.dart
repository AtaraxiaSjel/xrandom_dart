// SPDX-FileCopyrightText: Copyright (c) 2021 Art Galkin <ortemeo@gmail.com>
// SPDX-FileCopyrightText: Copyright (c) 2014 Andreas Madsen & Emil Bay
// SPDX-License-Identifier: MIT

import 'dart:math';

class XorShiftRandom implements Random {
  late int _state0U;
  late int _state0L;
  late int _state1U;
  late int _state1L;

  /// Create a pseudorandom number generator, with a seed.
  ///
  /// Optional parameter [seed] is a "128-bit" integer, composed
  /// of 4x32-bit integers in big endian order.
  XorShiftRandom([List<int>? seed]) {
    if (seed == null) {
      var dt = DateTime.now();
      seed = [
         dt.millisecondsSinceEpoch & 0xFFFFFFFF,
        (dt.millisecondsSinceEpoch >> 5) & 0xFFFFFFFF,
        (dt.millisecondsSinceEpoch >> 17) & 0xFFFFFFFF,
        (dt.millisecondsSinceEpoch >> 23) & 0xFFFFFFFF
      ];
    }

    if (seed.length != 4) throw ArgumentError("seed must be a list with four 32-bit values");

    this._state0U = seed[0] | 0;
    this._state0L = seed[1] | 0;
    this._state1U = seed[2] | 0;
    this._state1L = seed[3] | 0;
  }

  int _resU = 0;
  int _resL = 0;

  /// Higher 32 bits of the 64-bit random number generated by [step].
  int get resU => _resU;

  /// Lower 32 bits of the 64-bit random number generated by [step].
  int get resL => _resL;

  /// Generates a 64 bit random number and stores updates [resU] and [resL] properties.
  void step() {
    // This is rewritten code from
    // https://github.com/AndreasMadsen/xorshift/blob/master/xorshift.js

    const int MASK = 0xffffffff;

    // todo replace zeroFillRightShift calls with inline
    // uint64_t s1 = s[0]
    var s1U = this._state0U, s1L = this._state0L;
    // uint64_t s0 = s[1]
    var s0U = this._state1U, s0L = this._state1L;

    // result = s0 + s1
    var sumL = ((s0L & MASK) >> 0) + ((s1L & MASK) >> 0);
    //resU = zeroFillRightShift( (s0U + s1U + (sumL / 2 >>> 31)) , 0);
    _resU = ((s0U + s1U + (((sumL >> 1) & MASK) >> 31)) & MASK) >> 0;
    _resL = (sumL & MASK) >> 0; //_zeroFillRightShift(sumL, 0);

    // s[0] = s0
    this._state0U = s0U;
    this._state0L = s0L;

    // - t1 = [0, 0]
    var t1U = 0, t1L = 0;
    // - t2 = [0, 0]
    var t2U = 0, t2L = 0;

    // s1 ^= s1 << 23;
    // :: t1 = s1 << 23
    var a1 = 23;
    var m1 = 0xFFFFFFFF << (32 - a1);
    t1U = (s1U << a1) | (((s1L & m1) & MASK) >> (32 - a1));
    t1L = s1L << a1;
    // :: s1 = s1 ^ t1
    s1U = s1U ^ t1U;
    s1L = s1L ^ t1L;

    // t1 = ( s1 ^ s0 ^ ( s1 >> 17 ) ^ ( s0 >> 26 ) )
    // :: t1 = s1 ^ s0
    t1U = s1U ^ s0U;
    t1L = s1L ^ s0L;
    // :: t2 = s1 >> 18
    var a2 = 18;
    var m2 = (0xFFFFFFFF & MASK) >> (32 - a2);
    t2U = ((s1U & MASK) >> a2);
    t2L = ((s1L & MASK) >> a2) |
        ((s1U & m2) << (32 - a2)); //_zeroFillRightShift(s1L, a2) | ((s1U & m2) << (32 - a2));
    // :: t1 = t1 ^ t2
    t1U = t1U ^ t2U;
    t1L = t1L ^ t2L;
    // :: t2 = s0 >> 5
    var a3 = 5;
    var m3 = (0xFFFFFFFF & MASK >> (32 - a3)); //_zeroFillRightShift(0xFFFFFFFF, (32 - a3));
    t2U = (s0U & MASK) >> a3; //_zeroFillRightShift(s0U, a3);
    //t2L = _zeroFillRightShift(s0L, a3) | ((s0U & m3) << (32 - a3));
    t2L = ((s0L & MASK) >> a3) | ((s0U & m3) << (32 - a3));
    // :: t1 = t1 ^ t2
    t1U = t1U ^ t2U;
    t1L = t1L ^ t2L;

    // s[1] = t1
    this._state1U = t1U;
    this._state1L = t1L;
  }

  /// Returns a random number from range `0 <= x < 1.0`.
  @override
  double nextDouble() {
    this.step();
    return this._resU * 2.3283064365386963e-10 +
        ((this._resL & 0xffffffff) >> 12) * 2.220446049250313e-16;
  }

  /// Generates a non-negative random floating point value uniformly distributed
  /// in the range from [min], inclusive, to [max], exclusive.
  double nextDoubleInRange(num min, num max) {
    return min + ((max - min) * this.nextDouble());
  }

  int nextIntInRange(int min, int max) {
    return this.nextDoubleInRange(min, max).floor();
  }

  @override
  int nextInt(int max) {
    return this.nextIntInRange(0, max);
  }

  @override
  bool nextBool() {
    this.step();
    return this._resL % 2 == 0;
  }
}

class TestRandom extends XorShiftRandom
{
  TestRandom(): super([
    0x7332E803, 0xDDE92CC3,
    0xBE46BB50, 0x4B6D849D,
  ]);
}

void main() {
  print("Compiled JS!");
}