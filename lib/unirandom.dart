import 'dart:math';

const MAX_UINT32 = 0xFFFFFFFF;

abstract class UniRandom implements Random {

  int next();

  @override
  bool nextBool() {
    return this.next() % 2 == 0;
  }

  /// Generates a non-negative random floating point value uniformly distributed
  /// in the range from [min], inclusive, to [max], exclusive.
  double nextDoubleInRange(num min, num max) {
    return min + ((max - min) * this.nextDouble());
  }

  int nextIntInRange(int min, int max) {
    return this.nextDoubleInRange(min, max).floor();
  }

  @override
  int nextInt(int max) {
    return this.nextIntInRange(0, max);
  }
}

abstract class UniRandom32 extends UniRandom {

  @override
  double nextDouble() {
    int x = this.next();
    if (x>0xFFFFFFFF)
      throw AssertionError("Unexpected 32-bit value generated by .next(): $x");
    return x/0xFFFFFFFF;
  }

  // @override
  // int nextIntInRange(int min, int max) {
  //   if (min>MAX_UINT32)
  //     throw RangeError.value(min, "min");
  //
  //   return super.nextIntInRange(min, max);
  // }


}