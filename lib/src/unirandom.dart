// SPDX-FileCopyrightText: (c) 2021 Art Galkin <ortemeo@gmail.com>
// SPDX-License-Identifier: BSD-3-Clause

import 'dart:math';
import 'ints.dart';




abstract class UniRandom implements Random {

  int next();

  @override
  bool nextBool() {
    return this.next() % 2 == 0;
  }

  /// Generates a non-negative random floating point value uniformly distributed
  /// in the range from [min], inclusive, to [max], exclusive.
  double nextDoubleInRange(num min, num max) {
    return min + ((max - min) * this.nextDouble());
  }

  int nextIntInRange(int min, int max) {
    return this.nextDoubleInRange(min, max).floor();
  }

  @override
  int nextInt(int max) {
    return this.nextIntInRange(0, max);
  }
}

abstract class UniRandom32 extends UniRandom {
  @override
  double nextDouble() {
    int x = this.next();
    if (x>0xFFFFFFFF || x<=0)
      throw AssertionError("Unexpected 32-bit value generated by .next(): $x");

    // scaling x from (0, MAX_UINT32] to [0.0, 1.0).
    return (x-1)/MAX_UINT32;
  }
}

abstract class UniRandom64 extends UniRandom {
  @override
  double nextDouble() {
    int x = this.next();

    if (x>MAX_POSITIVE_INT64)
      throw AssertionError("Unexpected 64-bit value generated by .next(): $x");
    else if (x<0)
      x = x.unsetHighestBit64();
    assert(x>=0);
    assert(x<=MAX_POSITIVE_INT64);

    // scaling x from (0, MAX_POSITIVE_INT64] to [0.0, 1.0).
    return (x-1)/MAX_POSITIVE_INT64;
  }
}